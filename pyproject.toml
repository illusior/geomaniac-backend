[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Rafail Gazizyanov <grandoblivioniv@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"         # used as target of ruff lib
fastapi = "^0.111.0"
python-dotenv = "^1.0.1"

sentry-sdk = { extras = ["fastapi"], version = "^2.1.1" }

gunicorn = "^22.0.0"
uvicorn = { extras = ["standard"], version = "^0.29.0" }

bcrypt = "^4.1.3"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
python-jose = { extras = ["cryptography"], version = "^3.3.0" }

pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"

psycopg = { extras = ["binary"], version = "^3.1.19" }
sqlmodel = "^0.0.18"
emails = "^0.6"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pre-commit = "^3.7.1"
pytest = "^8.2.0"
ruff = "^0.4.4"
types-passlib = "^1.7.7.20240327"
types-python-jose = "^3.3.4.20240106"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
